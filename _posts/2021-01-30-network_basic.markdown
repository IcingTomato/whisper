---
layout: post
title:  "Basic Knowledge of Networking"
date:   2021-01-30 00:00:00
categories: post network
---

The foundations of networking: switches, routers, and wireless access points. Switches, routers, and wireless access points are the essential networking basics. Through them, devices connected to your network can communicate with one another and with other networks, like the Internet.

<!--more-->

# 传输介质简介

> 可以让设备通过网卡连接互联网的介质，如同轴电缆、双绞线和光纤等。不同的传输介质具有不同的特性，这些特性直接影响到通信的诸多方面，如线路编码方式、传输速度和传输距离等。

## 常见的网络传输介质

- 同轴电缆（Coaxial Cable）

![](http://icing.fun/img/post/2021/01/30/coaxial_cable.jpg)

> 同轴电缆是一种早期使用的传输介质，同轴电缆的标准分为两种，10BASE2和10BASE5。这两种标准都支持10Mbps的传输速率，最长传输距离分别为185米和500米。一般情况下，10Base2同轴电缆使用BNC接头，10Base5同轴电缆使用N型接头。

> 10BASE5和10BASE2是早期的两种以太网标准，它们均采用同轴电缆作为传输介质。10BASE5和10BASE2所使用的同轴电缆的直径分别为9.5mm和5mm，所以前者又称为粗缆，后者又称为细缆。

> 现在，10Mbps的传输速率早已不能满足目前企业网络需求，因此同轴电缆在目前企业网络中很少应用。

- 双绞线（Twisted Pair）

![](http://icing.fun/img/post/2021/01/30/twisted_pair.jpg)

> 与同轴电缆相比双绞线（Twisted Pair）具有更低的制造和部署成本，因此在企业网络中被广泛应用。双绞线可分为屏蔽双绞线(Shielded Twisted Pair，STP)和非屏蔽双绞线(Unshielded Twisted Pair，UTP)。屏蔽双绞线在双绞线与外层绝缘封套之间有一个金属屏蔽层，可以屏蔽电磁干扰。双绞线有很多种类型，不同类型的双绞线所支持的传输速率一般也不相同。例如，3类双绞线支持10Mbps传输速率；5类双绞线支持100Mbps传输速率；超5类双绞线及更高级别的双绞线支持千兆以太网传输。双绞线使用RJ-45接头连接网络设备。为保证终端能够正确收发数据，RJ-45接头中的针脚必须按照一定的线序排列

- 光纤（Optical Fiber）

![](http://icing.fun/img/post/2021/01/30/optical_fiber.jpg)

> 双绞线和同轴电缆传输数据时使用的是电信号，而光纤传输数据时使用的是光信号。光纤支持的传输速率包括10Mbps，100Mbps，1Gbps，10Gbps，甚至更高。根据光纤传输光信号模式的不同，光纤又可分为单模光纤和多模光纤。单模光纤只能传输一种模式的光，不存在模间色散，因此适用于长距离高速传输。多模光纤允许不同模式的光在一根光纤上传输，由于模间色散较大而导致信号脉冲展宽严重，因此多模光纤主要用于局域网中的短距离传输。光纤连接器种类很多，常用的连接器包括ST，FC，SC，LC连接器。

- 串口电缆（Serial Port Cable）

![](http://icing.fun/img/post/2021/01/30/serialportcable.jpg)

> 网络通信中常常会用到各种各样的串口电缆。常用的串口电缆标准为RS-232，同时也是推荐的标准。但是RS-232的传输速率有限，传输距离仅为6米。其他的串口电缆标准可以支持更长的传输距离，例如RS-422和RS-485的传输距离可达1200米。RS-422和RS-485串口电缆通常使用V.35接头，这种接头在上世纪80年代已经淘汰，但是现在仍在帧中继、ATM等传统网络上使用。V.24是RS-232标准的欧洲版。RS-232本身没有定义接头标准，常用的接头类型为DB-9和DB-25。现在，RS-232已逐渐被FireWire、USB等新标准取代，新产品和新设备已普遍使用USB标准。

### 什么是「网络」

> 网络是由若干节点和连接这些节点的链路构成，表示诸多对象及其相互联系。网络是信息传输、接收、共享的虚拟平台，通过它把各个点、面、体的信息联系到一起，从而实现这些资源的共享。网络是人类发展史来最重要的发明，提高了科技和人类社会的发展。

### 网络设备有什么

电脑、手机、iPad、凡是能联网的设备、提供服务的设备、路由器、交换机、防火墙、无线设备......

- 网卡是上网必备的工具

### 简单网络

两个终端，用一条能承载数据传输的物理介质（也称为传输介质）连接起来，就组成了一个最简单的网络。

![](http://icing.fun/img/post/2021/01/30/simplenetwork.jpg)

### 网络划分为

- 有线网络

- 无线网络

### 双绞线的线序

- T-568A

```
白绿 绿 白橙 蓝 白蓝 橙 白棕 棕
```

- T-568B

```
白橙 橙 白绿 蓝 白蓝 绿 白棕 棕
```

根据网线两端的线序可分为

1. 直通线：两端线序是一样的

2. 交叉线：两端线序是相反的

## 冲突域（Collision Domain）

![](http://icing.fun/img/post/2021/01/30/CollisionDomain.jpg)

共享式网络中可能会出现信号冲突现象。

> 如图是一个10BASE5以太网，每个主机都是用同一根同轴电缆来与其它主机进行通信，因此，这里的同轴电缆又被称为共享介质，相应的网络被称为共享介质网络，或简称为共享式网络。共享式网络中，不同的主机同时发送数据时，就会产生信号冲突的问题，解决这一问题的方法一般是采用载波侦听多路访问/冲突检测技术（Carrier Sense Multiple Access/Collision Detection）。

> CSMA/CD的基本工作过程如下：
>> 终端设备不停地检测共享线路的状态。如果线路空闲，则可以发送数据；如果线路不空闲，则等待一段时间后继续检测（延时时间由退避算法决定）。

>> 如果有另外一个设备同时发送数据，两个设备发送的数据会产生冲突。

>> 终端设备检测到冲突之后，会马上停止发送自己的数据，并发送特殊阻塞信息，以强化冲突信号，使线路上其他站点能够尽早检测到冲突。

>> 终端设备检测到冲突后，等待一段时间之后再进行数据发送（延时时间由退避算法决定）。

>> CSMA/CD的工作原理可简单总结为：先听后发，边发边听，冲突停发，随机延迟后重发。

## 双工模式（Duplex）

![](http://icing.fun/img/post/2021/01/30/Duplex.jpg)

两种双工模式都支持双向数据传输。

> 半双工：在半双工模式（half-duplex mode）下，通信双方都能发送和接收数据，但不能同时进行。当一台设备发送时，另一台只能接收，反之亦然。对讲机是半双工的典型例子。

> 全双工：在全双工模式（full-duplex mode）下，通信双方都能同时接收和发送数据。电话网络是典型的全双工例子。

> 以太网上的通信模式包括半双工和全双工两种：
>> 半双工模式下，共享物理介质的通信双方必须采用CSMA/CD机制来避免冲突。例如，10BASE5以太网的通信模式就必须是半双工模式。
>> 全双工模式下，通信双方可以同时实现双向通信，这种模式不会产生冲突，因此不需要使用CSMA/CD机制。例如，10BASE-T以太网的通信模式就可以是全双工模式。
>> 同一物理链路上相连的两台设备的双工模式必须保持一致。

# 以太网帧结构

![](http://icing.fun/img/post/2021/01/30/networkframe.jpg)

网络中传输数据时需要定义并遵循一些标准，以太网是根据IEEE 802.3标准来管理和控制数据帧的。

## 网络通信协议

![](http://icing.fun/img/post/2021/01/30/protocol.jpg)

不同的协议栈用于定义和管理不同网络的数据转发规则。

> 20世纪60年代以来，计算机网络得到了飞速发展。各大厂商和标准组织为了在数据通信网络领域占据主导地位，纷纷推出了各自的网络架构体系和标准，如IBM公司的SNA协议，Novell公司的IPX/SPX协议，以及广泛流行的OSI参考模型和TCP/IP协议。同时，各大厂商根据这些协议生产出了不同的硬件和软件。标准组织和厂商的共同努力促进了网络技术的快速发展和网络设备种类的迅速增长。

> 网络通信中，“协议”和“标准”这两个词汇常常可以混用。同时，协议或标准本身又常常具有层次的特点。一般地，关注于逻辑数据关系的协议通常被称为上层协议，而关注于物理数据流的协议通常被称为底层协议。IEEE 802就是一套用来管理物理数据流在局域网中传输的标准，包括在局域网中传输物理数据的802.3以太网标准。除以太外，还有一些用来管理物理数据流在广域网中传输的标准，如PPP（Point-to-Point Protocol），高级数据链路控制HDLC（High-Level Data Link Control）。

## 分层模型-OSI

![](http://icing.fun/img/post/2021/01/30/osi.jpg)

> 国际标准化组织ISO于1984年提出了OSI RM（Open System Interconnection Reference Model，开放系统互连参考模型）。OSI参考模型很快成为了计算机网络通信的基础模型。

> OSI参考模型具有以下优点：简化了相关的网络操作；提供了不同厂商之间的兼容性；促进了标准化工作；结构上进行了分层；易于学习和操作。

> OSI参考模型各个层次的基本功能如下：
>> 物理层：在设备之间传输比特流，规定了电平、速度和电缆针脚。

>> 数据链路层：将比特组合成字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行差错检测。

>> 网络层：提供逻辑地址，供路由器确定路径。 

>> 传输层：提供面向连接或非面向连接的数据传递以及进行重传前的差错检测。

>> 会话层：负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。

>> 表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。

>> 应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务。

## 分层模型-TCP/IP

![](http://icing.fun/img/post/2021/01/30/tcpip.jpg)

> TCP/IP模型同样采用了分层结构，层与层相对独立但是相互之间也具备非常密切的协作关系。

> TCP/IP模型将网络分为四层。TCP/IP模型不关注底层物理介质，主要关注终端之间的逻辑数据流转发。TCP/IP模型的核心是网络层和传输层，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的应用层通过各种协议向终端用户提供业务应用。

## 数据封装

![](http://icing.fun/img/post/2021/01/30/package.jpg)

> 应用数据需要经过TCP/IP每一层处理之后才能通过网络传输到目的端，每一层上都使用该层的协议数据单元PDU（Protocol Data Unit）彼此交换信息。不同层的PDU中包含有不同的信息，因此PDU在不同层被赋予了不同的名称。如上层数据在传输层添加TCP报头后得到的PDU被称为Segment（数据段）；数据段被传递给网络层，网络层添加IP报头得到的PDU被称为Packet（数据包）；数据包被传递到数据链路层，封装数据链路层报头得到的PDU被称为Frame（数据帧）；最后，帧被转换为比特，通过网络介质传输。这种协议栈逐层向下传递数据，并添加报头和报尾的过程称为封装。

## 终端之间的通信

![](http://icing.fun/img/post/2021/01/30/communication.jpg)

数据链路层控制数据帧在物理链路上传输。

> 数据包在以太网物理介质上传播之前必须封装头部和尾部信息，封装后的数据包称为数据帧，数据帧中封装的信息决定了数据如何传输。以太网上传输的数据帧有两种格式，选择哪种格式由TCP/IP协议簇中的网络层决定。

## 帧格式

![](http://icing.fun/img/post/2021/01/30/frame.jpg)

> 以太网上使用两种标准帧格式。第一种是上世纪80年代初提出的DIX v2格式，即Ethernet II帧格式。Ethernet II后来被IEEE 802标准接纳，并写进了IEEE 802.3x-1997的3.2.6节。第二种是1983年提出的IEEE 802.3格式。这两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段。

> 不同的Type字段值可以用来区别这两种帧的类型，当Type字段值小于等于1500（或者十六进制的0x05DC）时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536 （或者十六进制的0x0600）时，帧使用的是Ethernet II格式。以太网中大多数的数据帧使用的是Ethernet II格式。

> 以太帧中还包括源和目的MAC地址，分别代表发送者的MAC和接收者的MAC，此外还有帧校验序列字段，用于检验传输过程中帧的完整性。

## Ethernet_II帧格式

![](http://icing.fun/img/post/2021/01/30/ethernetii.jpg)

Ethernet_II 帧类型值大于等于1536 (0x0600)，以太网数据帧的长度在64-1518字节之间。

> Ethernet_II的帧中各字段说明如下：
>> DMAC（Destination MAC）是目的MAC地址。DMAC字段长度为6个字节，标识帧的接收者。

>> SMAC（Source MAC）是源MAC地址。SMAC字段长度为6个字节，标识帧的发送者。

>> 类型字段（Type）用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0x0806的帧代表ARP协议帧。

>> 数据字段（Data）是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节
。
>> 循环冗余校验字段（FCS）提供了一种错误检测机制。该字段长度为4个字节。

## IEEE802.3帧格式

![](http://icing.fun/img/post/2021/01/30/ieee8023.jpg)

IEEE802.3帧长度字段值小于等于1500 (0x05DC)。

> IEEE802.3帧格式类似于Ethernet_II帧，只是Ethernet_II帧的Type域被802.3帧的Length域取代，并且占用了Data字段的8个字节作为LLC和SNAP字段。

> Length字段定义了Data字段包含的字节数。

> 逻辑链路控制LLC（Logical Link Control）由目的服务访问点DSAP（Destination Service Access Point）、源服务访问点SSAP（Source Service Access Point）和Control字段组成。

> SNAP（Sub-network Access Protocol）由机构代码（Org Code）和类型（Type）字段组成。Org Code三个字节都为0。Type字段的含义与Ethernet_II帧中的Type字段相同。IEEE802.3帧根据DSAP和SSAP字段的取值又可分为以下几类：
>>       1）当DSAP和SSAP都取特定值0xff时，802.3帧就变成了Netware-ETHERNET帧，用来承载NetWare类型的数据。
>>       2）当DSAP和SSAP都取特定值0xaa时，802.3帧就变成了ETHERNET_SNAP帧。ETHERNET_SNAP帧可以用于传输多种协议。
>>       3）DSAP和SSAP其他的取值均为纯IEEE802.3帧。

## 数据帧传输

![](http://icing.fun/img/post/2021/01/30/frametrans.jpg)

数据链路层基于MAC地址进行帧的传输。

> 以太网在二层链路上通过MAC地址来唯一标识网络设备，并且实现局域网上网络设备之间的通信。MAC地址也叫物理地址，大多数网卡厂商把MAC地址烧入了网卡的ROM中。发送端使用接收端的MAC地址作为目的地址。以太帧封装完成后会通过物理层转换成比特流在物理介质上传输。

## 以太网的MAC地址

![](http://icing.fun/img/post/2021/01/30/mac.jpg)

MAC地址由两部分组成，分别是供应商代码和序列号。其中前24位代表该供应商代码，由IEEE管理和分配。剩下的24位序列号由厂商自己分配。

> 如同每一个人都有一个名字一样，每一台网络设备都用物理地址来标识自己，这个地址就是MAC地址。网络设备的MAC地址是全球唯一的。MAC地址长度为48比特，通常用十六进制表示。MAC地址包含两部分：前24比特是组织唯一标识符（OUI，Organizationally Unique Identifier），由IEEE统一分配给设备制造商。例如，华为的网络产品的MAC地址前24比特是0x00e0fc。后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配（这里所说的产品可以是网卡或者其他需要MAC地址的设备）。

## 单播（Unicast）

![](http://icing.fun/img/post/2021/01/30/unicast.jpg)

> 局域网上的帧可以通过三种方式发送。第一种是单播，指从单一的源端发送到单一的目的端。每个主机接口由一个MAC地址唯一标识，MAC地址的OUI中，第一字节第8个比特表示地址类型。对于主机MAC地址，这个比特固定为0，表示目的MAC地址为此MAC地址的帧都是发送到某个唯一的目的端。在冲突域中，所有主机都能收到源主机发送的单播帧，但是其他主机发现目的地址与本地MAC地址不一致后会丢弃收到的帧，只有真正的目的主机才会接收并处理收到的帧。

## 广播（Broadcast）

![](http://icing.fun/img/post/2021/01/30/broadcast.jpg)

> 第二种发送方式是广播，表示帧从单一的源发送到共享以太网上的所有主机。广播帧的目的MAC地址为十六进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接收并处理这个帧。

> 广播方式会产生大量流量，导致带宽利用率降低，进而影响整个网络的性能。

> 当需要网络中的所有主机都能接收到相同的信息并进行处理的情况下，通常会使用广播方式。

## 组播（Multicast）

![](http://icing.fun/img/post/2021/01/30/multicast.jpg)

> 第三种发送方式为组播，组播比广播更加高效。组播转发可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧。

> 组播MAC地址和单播MAC地址是通过第一字节中的第8个比特区分的。组播MAC地址的第8个比特为1，而单播MAC地址的第8个比特为0。

> 当需要网络上的一组主机（而不是全部主机）接收相同信息，并且其他主机不受影响的情况下通常会使用组播方式。

## 数据帧的发送和接收

![](http://icing.fun/img/post/2021/01/30/frametxrx.jpg)

当主机接收到的数据帧所包含的目的MAC地址是自己时，会把以太网封装剥掉后送往上层协议。

> 帧从主机的物理接口发送出来后，通过传输介质传输到目的端。共享网络中，这个帧可能到达多个主机。主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧。

> 如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列（FCS）字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果帧的FCS值与本机计算的值不同，主机会认为帧已被破坏，并会丢弃该帧。如果该帧通过了FCS校验，则主机会根据帧头部中的Type字段来确定将帧发送给上层哪个协议处理。本例中，Type字段的值为0x0800，表明该帧需要发送到IP协议上处理。在发送给IP协议之前，帧的头部和尾部会被剥掉。

# IP编址

## 上层协议地址

![](http://icing.fun/img/post/2021/01/30/ipprotocol.jpg)

以太网帧中的Type字段值为0x0800，表示该帧的网络层协议为IP协议。

> 在剥掉帧的头部和尾部之前，网络设备需要根据帧头中Type字段确定下一步将帧发送到哪个上层协议进行处理。本例中的帧头部Type字段表示该帧需要上送到IP协议进行处理。以下将介绍帧的头部和尾部被剥掉后，IP协议将如何处理帧中的数据。

## IP报文头部

![](http://icing.fun/img/post/2021/01/30/ipheader.jpg)

> IP报文头部信息用于指导网络设备对报文进行路由和分片。同一个网段内的数据转发通过链路层即可实现，而跨网段的数据转发需要使用网络设备的路由功能。分片是指数据包超过一定长度时，需要被划分成不同的片段使其能够在网络中传输。

> IP报文头部长度为20到60字节，报文头中的信息可以用来指导网络设备如何将报文从源设备发送到目的设备。其中，版本字段表示当前支持的IP协议版本，当前的版本号为4。DS字段早期用来表示业务类型，现在用于支持QoS中的差分服务模型，实现网络流量优化。

> 源和目的IP地址是分配给主机的逻辑地址，用于在网络层标识报文的发送方和接收方。根据源和目的IP地址可以判断目的端是否与发送端位于同一网段，如果二者不在同一网段，则需要采用路由机制进行跨网段转发。

## IP编址

![](http://icing.fun/img/post/2021/01/30/ipaddress.jpg)

IP地址分为网络部分和主机部分。

IP地址由32个二进制位组成，通常用点分十进制形式表示。

> IPv4地址为32比特的二进制数，通常用点分十进制表示。IP地址用来标识网络中的设备，具有IP地址的设备可以在同一网段内或跨网段通信。IP地址包括两部分，第一部分是网络号，表示IP地址所属的网段，第二部分是主机号，用来唯一标识本网段上的某台网络设备。

![](http://icing.fun/img/post/2021/01/30/ipaddress2.jpg)

> 每个网段上都有两个特殊地址不能分配给主机或网络设备。第一个是该网段的网络地址，该IP地址的主机位为全0，表示一个网段。第二个地址是该网段中的广播地址，目的地址为广播地址的报文会被该网段中的所有网络设备接收。广播地址的主机位为全1。除网络地址和广播地址以外的其他IP地址都可以作为网络设备的IP地址。

## 二进制、十进制和十六进制

![](http://icing.fun/img/post/2021/01/30/dox.jpg)

在IP网络中，二进制和十六进制是常用的编码方式。

> 网络中的数据可以采用二进制、十进制或十六进制来表示，了解这些进制对理解IP网络基础知识很有必要。每种进制使用不同的基值表示每一位的数值。二进制每一位只有0和1两个值，基值为2，二进制数的每一位都可以用2的x次幂来表示，x表示二进制数的位数。十六进制的每一位可以有16个数值，范围为0-F（即0-9和A-F），A对应十进制的10，F对应十进制的15（二进制的1111）。

![](http://icing.fun/img/post/2021/01/30/dox2.jpg)

> IP地址以字节为单位分为四段，每字节包含8个比特，可以表示0到255，共256个数值。从二进制到十进制转换表中可以看到每一位二进制数所代表的十进制数。上面的表格举例说明了8位二进制数转换为十进制数和十六进制数的情况。从表格中也可以看到全0和全1所对应的十进制数和十六进制数。

## 二进制和十进制转换

![](http://icing.fun/img/post/2021/01/30/dox3.jpg)

> 32位的IP地址分为4个字节，每个字节有256个取值。因此，理论上IPv4可以有4,294,967,296个IP地址，但实际上只有其中一部分地址可以分配给网络设备使用。本例中，IP地址的前三个字节表示网络号，最后一个字节表示该网络上网络设备可用的地址范围。将二进制格式的IP地址转换为十进制格式时，需要把二进制中每一位1所代表的值加在一起，得出IP地址的十进制值。

## IP地址分类

![](http://icing.fun/img/post/2021/01/30/ipaddress3.jpg)

> IPv4地址被划分为A、B、C、D、E五类，每类地址的网络号包含不同的字节数。A类，B类和C类地址为可分配IP地址，每类地址支持的网络数和主机数不同。比如，A类地址可支持126个网络，每个网络支持224 （16,777,216 )个主机地址，另外每个网段中的网络地址和广播地址不能分配给主机。C类地址支持200多万个网络，每个网络支持256个主机地址，其中254个地址可以分配给主机使用。

> D类地址为组播地址。主机收到以D类地址为目的地址的报文后，且该主机是该组播组成员，就会接收并处理该报文。各类IP地址可以通过第一个字节中的比特位进行区分。如A类地址第一字节的最高位固定为0，B类地址第一字节的高两位固定为10，C类地址第一字节的高三位固定为110，D类地址第一字节的高四位固定为1110，E类地址第一字节的高四位固定为1111。

## IP地址类型

> 私有地址范围
- 10.0.0.0~10.255.255.255 
- 172.16.0.0~172.31.255.255
- 192.168.0.0~192.168.255.255

> 特殊地址
- 127.0.0.0~127.255.255.255
- 0.0.0.0
- 255.255.255.255

> IPv4中的部分IP地址被保留用作特殊用途。为节省IPv4地址，A、B、C类地址段中都预留了特定范围的地址作为私网地址。现在，世界上所有终端系统和网络设备需要的IP地址总数已经超过了32位IPv4地址所能支持的最大地址数4,294,967,296。为主机分配私网地址节省了公网地址，可以用来缓解IP地址短缺的问题。企业网络中普遍使用私网地址，不同企业网络中的私网地址可以重叠。默认情况下，网络中的主机无法使用私网地址与公网通信；当需要与公网通信时，私网地址必须转换成公网地址。还有其他一些特殊IP地址，如127.0.0.0网段中的地址为环回地址，用于诊断网络是否正常。IPv4中的第一个地址0.0.0.0表示任何网络，这个地址的作用将在路由原理中详细介绍。IPv4中的最后一个地址255.255.255.255是0.0.0.0网络中的广播地址。

## 网络通信

![](http://icing.fun/img/post/2021/01/30/networkcommunication.jpg)

> 源主机必须要知道目的主机的IP地址后才能将数据发送到目的地。源主机向其他目的主机发送报文之前，需要检查目的IP地址和源IP地址是否属于同一个网段。如果是，则报文将被下发到底层协议进行以太网封装处理。如果目的地址和源地址属于不同网段，则主机需要获取下一跳路由器的IP地址，然后将报文下发到底层协议处理。

## 子网掩码（Mask）

![](http://icing.fun/img/post/2021/01/30/mask.jpg)

> 子网掩码用于区分网络部分和主机部分。子网掩码与IP地址的表示方法相同。每个IP地址和子网掩码一起可以用来唯一的标识一个网段中的某台网络设备。子网掩码中的1表示网络位，0表示主机位。

## 默认子网掩码

![](http://icing.fun/img/post/2021/01/30/default_mask.jpg)

> 每类IP地址有一个缺省子网掩码。A类地址的缺省子网掩码为8位，即第一个字节表示网络位，其他三个字节表示主机位。B类地址的缺省子网掩码为16位，因此B类地址支持更多的网络，但是主机数也相应减少。C类地址的缺省子网掩码为24位，支持的网络最多，同时也限制了单个网络中主机的数量。

## 地址规划

![](http://icing.fun/img/post/2021/01/30/address.jpg)

> 通过子网掩码可以判断主机所属的网段、网段上的广播地址以及网段上支持的主机数。图中这个例子，主机地址为192.168.1.7，子网掩码为24位（C类IP地址的缺省掩码），从中我们可以判断该主机位于192.168.1.0/24网段。将IP地址中的主机位全部置为1，并转换为十进制数，即可得到该网段的广播地址192.168.1.255。网段中支持的主机数为2n，n为主机位的个数。本例中n=8，28=256，减去本网段的网络地址和广播地址，可知该网段支持254个有效主机地址。

## 有类IP编址的缺陷

![](http://icing.fun/img/post/2021/01/30/ipwaste.jpg)

在设计网络时使用有类IP地址会造成地址的浪费。

> 如果企业网络中希望通过规划多个网段来隔离物理网络上的主机，使用缺省子网掩码就会存在一定的局限性。网络中划分多个网段后，每个网段中的实际主机数量可能很有限，导致很多地址未被使用。如图所示的场景下，如果使用缺省子网掩码的编址方案，则地址使用率很低。

## 变长子网掩码

![](http://icing.fun/img/post/2021/01/30/VLSM.jpg)

> 采用可变长子网掩码可解决上述问题。缺省子网掩码可以进一步划分，成为变长子网掩码（VLSM）。通过改变子网掩码，可以将网络划分为多个子网。本例中的地址为C类地址，缺省子网掩码为24位。现借用一个主机位作为网络位，借用的主机位变成子网位。一个子网位有两个取值0和1，因此可划分两个子网。该比特位设置为0，则子网号为0，该比特位设置为1，则子网号为128。将剩余的主机位都设置为0，即可得到划分后的子网地址；将剩余的主机位都设置为1，即可得到子网的广播地址。每个子网中支持的主机数为27-2（减去子网地址和广播地址），即126个主机地址。

## 网关（Gateway）

![](http://icing.fun/img/post/2021/01/30/gateway.jpg)

网关用来转发来自不同网段之间的数据包。

> 报文转发过程中，首先需要确定转发路径以及通往目的网段的接口，然后将报文封装在以太帧中通过指定的物理接口转发出去。如果目的主机与源主机不在同一网段，报文需要先转发到网关，然后通过网关将报文转发到目的网段。

> 网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。为实现此功能，网关必须知道目的网段的IP地址。网关设备上连接本地网段的接口地址即为该网段的网关地址。

## IP包分片

![](http://icing.fun/img/post/2021/01/30/ippackage.jpg)

> 网络中转发的IP报文的长度可以不同，但如果报文长度超过了数据链路所支持的最大长度，则报文就需要分割成若干个较小的片段才能够在链路上传输。将报文分割成多个片段的过程叫做分片。

> 接收端根据分片报文中的标识符（Identification），标志（Flags)，及片偏移（Fragment Offset）字段对分片报文进行重组。标识符用于识别属于同一个数据包的分片，以区别于同一主机或其他主机发送的其它数据包分片，保证分片被正确的重新组合。标志字段用于判断是否已经收到最后一个分片。最后一个分片的标志字段设置为0，其他分片的标志字段设置为1，目的端在收到标志字段为0的分片后，开始重组报文。片偏移字段表示每个分片在原始报文中的位置。第一个分片的片偏移为0，第二个分片的片偏移表示紧跟第一个分片后的第一个比特的位置。比如，如果首片报文包含1259比特，那么第二分片报文的片偏移字段值就应该为1260。

## 生存时间

![](http://icing.fun/img/post/2021/01/30/livetime.jpg)

> 报文在网段间转发时，如果网络设备上的路由规划不合理，就可能会出现环路，导致报文在网络中无限循环，无法到达目的端。环路发生后，所有发往这个目的地的报文都会被循环转发，随着这种报文逐渐增多，网络将会发生拥塞。

> 为避免环路导致的网络拥塞，IP报文头中包含一个生存时间TTL（Time To Live）字段。报文每经过一台三层设备，TTL值减1。初始TTL值由源端设备设置。当报文中的TTL降为0时，报文会被丢弃。同时，丢弃报文的设备会根据报文头中的源IP地址向源端发送ICMP错误消息。

## 协议号

![](http://icing.fun/img/post/2021/01/30/protocolnum.jpg)

> 目的端的网络层在接收并处理报文以后，需要决定下一步对报文该做如何处理。IP报文头中的协议字段标识了将会继续处理报文的协议。与以太帧头中的Type字段类似，协议字段也是一个十六进制数。该字段可以标识网络层协议，如ICMP（Internet Control Message Protocol，因特网控制报文协议），也可以标识上层协议，如TCP（Transmission Control Protocol，传输控制协议，对应值0x06）、UDP（User Datagram Protocol，用户数据包协议，对应值0x11）。

## 常用端口列举

- 端口：0
> 服务：Reserved
>> 说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端 口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用 IP地址为0.0.0.0，设置ACK位并在以太网层广播。

- 端口：1
> 服务：tcpmux
>> 说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下 tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如： IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘 记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。

- 端口：7
> 服务：Echo
>> 说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。

- 端口：19
> 服务：Character Generator
>> 说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的 包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发 动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的 这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。

- 端口：20、21
> 服务：FTP
>> 说明：FTP服务器所开放的端口，20用于数据传输，21用于控制。最常见的攻击者用于寻找打开 anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、 Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。

- 端口：22
> 服务：Ssh
>> 说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱 点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。

- 端口：23
> 服务：Telnet
>> 说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为 了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。

- 端口：25
> 服务：SMTP
>> 说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他 们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的 信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、 Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。

- 端口：31
> 服务：MSG Authentication
>> 说明：木马Master Paradise、Hackers Paradise开放此端口。

- 端口：42
> 服务：WINS Replication
>> 说明：WINS复制

- 端口：53
> 服务：Domain Name Server（DNS）
>> 说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS （UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。

- 端口：67
> 服务：Bootstrap Protocol Server
>> 说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255 的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把 自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播 请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可 以发送的IP地址。

- 端口：69
> 服务：Trival File Transfer
>> 说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。

- 端口：79
> 服务：Finger Server
>> 说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。

- 端口：80
> 服务：HTTP
>> 说明：用于网页浏览。木马Executor开放此端口。

- 端口：99
> 服务：Metagram Relay
>> 说明：后门程序ncx99开放此端口。

- 端口：102
> 服务：Message transfer agent(MTA)-X.400 over TCP/IP
>> 说明：消息传输代理。

- 端口：109
> 服务：Post Office Protocol -Version3
>> 说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。

- 端口：110
> 服务：SUN公司的RPC服务所有端口
>> 说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等

- 端口：113
> 服务：Authentication Service
>> 说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。

- 端口：119
> 服务：Network News Transfer Protocol
>> 说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。

- 端口：135
> 服务：Location Service
>> 说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？ 什么版本？还有

- 端口：110
> 服务：pop3
>> 说明：POP3(Post Office Protocol 3)服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。

- 端口：137、138、139
> 服务：NETBIOS Name Service
>> 说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。

- 端口：143
> 服务：Interim Mail Access Protocol v2
>> 说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。

- 端口：161
> 服务：SNMP
> 说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。

- 端口：389
> 服务：LDAP、ILS
>> 说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。 

- 端口：443
> 服务：Https
>> 说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。

- 端口：993
> 服务：IMAP
>> 说明：SSL（Secure Sockets layer） 

- 端口：1080
> 服务：SOCKS代理协议服务器
>> 说明：SOCKS代理协议服务器

- 端口：1433
> 服务：SQL
>> 说明：Microsoft的SQL服务开放的端口。 

- 端口：1503
> 服务：NetMeeting T.120
>> 说明：NetMeeting T.120 

- 端口：1521
> 服务：Oracle 数据库
>> 说明：Oracle 数据库

- 端口：1720
> 服务：NetMeeting
>> 说明：NetMeeting H.233 call Setup。 

- 端口：1731
> 服务：NetMeeting Audio Call Control
>> 说明：NetMeeting音频调用控制。 

- 端口：3306
> 服务：MySQL 数据库
>> 说明：MySQL 数据库

- 端口：3389
> 服务：超级终端
>> 说明：WINDOWS 2000终端开放此端口。 

- 端口：4000
> 服务：QQ客户端
>> 说明：腾讯QQ客户端开放此端口。 

- 端口：5631
> 服务：pcAnywere
>> 说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。

- 端口：6970
> 服务：RealAudio
>> 说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。

- 端口：7323
> 服务：
>> 说明：Sygate服务器端。 

- 端口：8000
> 服务：OICQ
>> 说明：腾讯QQ服务器端开放此端口。 

- 端口：8010
> 服务：Wingate
>> 说明：Wingate代理开放此端口。 

- 端口：8080
> 服务：代理端口
>> 说明：WWW代理开放此端口

# 传输层协议 

传输层定义了主机应用程序之间端到端的连通性。传输层中最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP（User Datagram Protocol）。

## TCP

![](http://icing.fun/img/post/2021/01/30/tcp.jpg)

TCP是一种面向连接的传输层协议，可提供可靠的传输服务。

> TCP位于TCP/IP模型的传输层，它是一种面向连接的端到端协议。TCP作为传输控制协议，可以为主机提供可靠的数据传输。在本例中，两台主机在通信之前，需要TCP在它们之间建立可靠的传输通道。

### TCP端口号

![](http://icing.fun/img/post/2021/01/30/tcpport.jpg)

端口号用来区分不同的网络服务。

> TCP允许一个主机同时运行多个应用进程。每台主机可以拥有多个应用端口，每对端口号、源和目标IP地址的组合唯一地标识了一个会话。端口分为知名端口和动态端口。有些网络服务会使用固定的端口，这类端口称为知名端口，端口号范围为0-1023。如FTP、HTTP、Telnet、SNMP服务均使用知名端口。动态端口号范围从1024到65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。

### TCP头部

![](http://icing.fun/img/post/2021/01/30/tcpheader.jpg)

> TCP通常使用IP作为网络层协议，这时TCP数据段被封装在IP数据包内。

> TCP数据段由TCP Header（头部）和TCP Data（数据）组成。TCP最多可以有60个字节的头部，如果没有Options字段，正常的长度是20字节。

> TCP Header是由如上图标识的一些字段组成，这里列出几个常用字段。

>16位源端口号：源主机的应用程序使用的端口号。

>16位目的端口号：目的主机的应用程序使用的端口号。每个TCP头部都包含源和目的端的端口号，这两个值加上IP头部中的源IP地址和目的IP地址可以唯一确定一个TCP连接。

>32位序列号：用于标识从发送端发出的不同的TCP数据段的序号。数据段在网络中传输时，它们的顺序可能会发生变化；接收端依据此序列号，便可按照正确的顺序重组数据。

> 32位确认序列号：用于标识接收端确认收到的数据段。确认序列号为成功收到的数据序列号加1。

> 4位头部长度：表示头部占32bit字的数目，它能表达的TCP头部最大长度为60字节。

> 16位窗口大小：表示接收端期望通过单次确认而收到的数据的大小。由于该字段为16位，所以窗口大小的最大值为65535字节，该机制通常用来进行流量控制。

>16位校验和：校验整个TCP报文段，包括TCP头部和TCP数据。该值由发送端计算和记录并由接收端进行验证。

### TCP建立连接的过程

![](http://icing.fun/img/post/2021/01/30/tcpconnect.jpg)

> TCP通过三次握手建立可靠连接。

> TCP是一种可靠的，面向连接的全双工传输层协议。

> TCP连接的建立是一个三次握手的过程。如图所示：

> 主机A（通常也称为客户端）发送一个标识了SYN的数据段，表示期望与服务器A建立连接，此数据段的序列号（seq）为a。

> 服务器A回复标识了SYN+ACK的数据段，此数据段的序列号（seq）为b，确认序列号为主机A的序列号加1（a+1），以此作为对主机A的SYN报文的确认。

> 主机A发送一个标识了ACK的数据段，此数据段的序列号（seq）为a+1，确认序列号为服务器A的序列号加1（b+1），以此作为对服务器A的SYN报文的确认。

### TCP传输过程

![](http://icing.fun/img/post/2021/01/30/tcptrans.jpg)

> TCP的可靠传输还体现在TCP使用了确认技术来确保目的设备收到了从源设备发来的数据，并且是准确无误的。

> 确认技术的工作原理如下：
>> 目的设备接收到源设备发送的数据段时，会向源端发送确认报文，源设备收到确认报文后，继续发送数据段，如此重复。

>>如图所示，主机A向服务器A发送TCP数据段，为描述方便假定每个数据段的长度都是500个字节。当服务器A成功收到序列号是M+1499的字节以及之前的所有字节时，会以序列号M+1499+1=M+1500进行确认。另外，由于数据段N+3传输失败，所以服务器A未能收到序列号为M+1500的字节，因此服务器A还会再次以序列号M+1500进行确认。

### TCP流量控制

![](http://icing.fun/img/post/2021/01/30/tcpstream.jpg)

> TCP滑动窗口技术通过动态改变窗口大小来实现对端到端设备之间的数据传输进行流量控制。

> 如图所示，主机A和服务器A之间通过滑动窗口来实现流量控制。为方便理解，此例中只考虑主机A发送数据给服务器A时，服务器A通过滑动窗口进行流量控制。

> 主机A向服务器发送4个长度为1024字节的数据段，其中主机的窗口大小为4096个字节。服务器A收到第3个数据段后，缓存区满，第4个数据段被丢弃。服务器以ACK 3073响应，窗口大小调整为3072，表明服务器的缓冲区只能处理3072个字节的数据段。于是主机A改变其发送速率，发送窗口大小为3072的数据段。

### TCP关闭连接

![](http://icing.fun/img/post/2021/01/30/tcpoff.jpg)

主机在关闭连接之前，要确认收到来自对方的ACK。

> TCP支持全双工模式传输数据，这意味着同一时刻两个方向都可以进行数据的传输。在传输数据之前，TCP通过三次握手建立的实际上是两个方向的连接，因此在传输完毕后，两个方向的连接必须都关闭。

> TCP连接的建立是一个三次握手的过程，而TCP连接的终止则要经过四次握手。

> 如图所示：
>> 主机A想终止连接，于是发送一个标识了FIN，ACK的数据段，序列号为a，确认序列号为b。

>> 服务器A回应一个标识了ACK的数据段，序列号为b，确认序号为a+1，作为对主机A的FIN报文的确认。

>> 服务器A想终止连接，于是向主机A发送一个标识了FIN，ACK的数据段，序列号为b，确认序列号为a+1。

>> 主机A回应一个标识了ACK的数据段，序列号为a+1，确认序号为b+1，作为对服务器A的FIN报文的确认。

> 以上四次交互便完成了两个方向连接的关闭。

## UDP

![](http://icing.fun/img/post/2021/01/30/udp.jpg)

UDP是一种面向无连接的传输层协议，传输可靠性没有保证。

> 当应用程序对传输的可靠性要求不高，但是对传输速度和延迟要求较高时，可以用UDP协议来替代TCP协议在传输层控制数据的转发。UDP将数据从源端发送到目的端时，无需事先建立连接。UDP采用了简单、易操作的机制在应用程序间传输数据，没有使用TCP中的确认技术或滑动窗口机制，因此UDP不能保证数据传输的可靠性，也无法避免接收到重复数据的情况。

### UDP头部

![](http://icing.fun/img/post/2021/01/30/udpheader.jpg)

UDP头部仅占8字节，传输数据时没有确认机制。

> UDP报文分为UDP报文头和UDP数据区域两部分。报头由源端口、目的端口、报文长度以及校验和组成。UDP适合于实时数据传输，如语音和视频通信。相比于TCP，UDP的传输效率更高、开销更小，但是无法保障数据传输的可靠性。UDP头部的标识如下：

> 16位源端口号：源主机的应用程序使用的端口号。

> 16位目的端口号：目的主机的应用程序使用的端口号。

> 16位UDP长度：是指UDP头部和UDP数据的字节长度。因为UDP头部长度为8字节，所以该字段的最小值为8。

> 16位UDP校验和：该字段提供了与TCP校验字段同样的功能；该字段是可选的。

### UDP传输过程

![](http://icing.fun/img/post/2021/01/30/udptrans.jpg)

使用UDP传输数据时，由应用程序根据需要提供报文到达确认、排序、流量控制等功能。

> 主机A发送数据包时，这些数据包是以有序的方式发送到网络中的，每个数据包独立地在网络中被发送，所以不同的数据包可能会通过不同的网络路径到达主机B。这样的情况下，先发送的数据包不一定先到达主机B。因为UDP数据包没有序号，主机B将无法通过UDP协议将数据包按照原来的顺序重新组合，所以此时需要应用程序提供报文的到达确认、排序和流量控制等功能。通常情况下，UDP采用实时传输机制和时间戳来传输语音和视频数据。

![](http://icing.fun/img/post/2021/01/30/udptrans2.jpg)

UDP不提供重传机制，占用资源小，处理效率高。

一些时延敏感的流量，如语音、视频等，通常使用UDP作为传输层协议。

> UDP适合传输对时延敏感的流量，如语音和视频。

> 在使用TCP协议传输数据时，如果一个数据段丢失或者接收端对某个数据段没有确认，发送端会重新发送该数据段。

> TCP重新发送数据会带来传输延迟和重复数据，降低了用户的体验。对于时延敏感的应用，少量的数据丢失一般可以被忽略，这时使用UDP传输将能够提升用户的体验。

# 数据转发过程

TCP/IP协议簇和底层协议配合，保证了数据能够实现端到端的传输。数据传输过程是一个非常复杂的过程，例如数据在转发的过程中会进行一系列的封装和解封装。对于网络工程师来说，只有深入地理解了数据在各种不同设备上的转发过程，才能够对网络进行正确的分析和检测。

## 数据转发过程概述

![](http://icing.fun/img/post/2021/01/30/datatrans.jpg)

数据包在相同网段内或不同网段之间转发所依据的原理基本一致。

> 数据可以在同一网络内或者不同网络间传输，数据转发过程也分为本地转发和远程转发，但两者的数据转发原理是基本一样的，都是遵循TCP/IP协议簇。

> 本示例中，主机A需要访问服务器A的Web服务，并且假定两者之间已经建立了TCP连接。接下来会以此示例来讲解数据在不同网络间的传输过程。

## TCP封装

![](http://icing.fun/img/post/2021/01/30/tcppack.jpg)

当主机建立了到达目的地的TCP连接后，便开始对应用层数据进行封装。

> 主机A会对待发送的应用数据首先执行加密和压缩等相关操作，之后进行传输层封装。Web应用是基于传输层的TCP协议传输数据的。主机A使用TCP进行报文封装时，必须填充源端口和目的端口字段，初始序列号和确认序列号字段，标识位，窗口字段以及校验和字段。此例中数据段的源端口号为主机A随机选择的1027号端口，目的端口号为服务器A的TCP知名端口80。

## IP封装

![](http://icing.fun/img/post/2021/01/30/ippack.jpg)

> 主机A完成传输层封装后，一般会进行网络层数据封装，在使用IP进行封装时，需要明确IP报文的源和目的地址。如果IP报文的大小大于网络的最大传输单元（MTU），则该报文有可能在传输过程中被分片。

> 生存时间（TTL）字段用来减少网络环路造成的影响。ARG3系列路由器产生的数据包，默认TTL值为255。路由器转发一个数据包时，该值会被减1，如果路由器发现该值被减为0，就会丢弃该数据包。这样，即使网络中存在环路，数据包也不会在网络上一直被转发。

> 协议字段标识了传输层所使用的协议。本例中，传输层使用的是TCP协议，所以该字段的填充值为0X06。

## 查找路由

![](http://icing.fun/img/post/2021/01/30/findroute.jpg)

主机A必须要拥有到达目的地的路由。

> 每个主机都会独自维护各自的路由表项。主机A在发送数据前需要先检查是否能够到达目的端，这个过程是通过查找路由来完成的。在此示例中，主机A拥有一条到达“任何网络”（在IP编址部分已经简要介绍过）的路由，它发往其他网络的数据都会通过IP地址为10.1.1.1的接口转发到下一跳，即网关10.1.1.254。

## ARP

![](http://icing.fun/img/post/2021/01/30/arp.jpg)

通过ARP缓存表找到下一跳的MAC地址。

如果表项里没有下一跳的MAC地址，主机A会发送ARP请求。

> 接下来，由于数据包要被封装成数据帧，所以主机A需要获取下一跳的MAC地址，也就是网关的MAC地址。主机首先会查询ARP缓存表。本例中，主机A的ARP缓存表中存在网关MAC地址的表项。

>如果没有查找到网关的MAC地址表项，主机A会通过发送ARP请求来获取网关的MAC地址。

## 以太网封装

![](http://icing.fun/img/post/2021/01/30/ethpack.jpg)

> 主机A在链路层封装数据帧时，会遵循IEEE 802.3或Ethernet_II标准，Ethernet_II帧头中的类型字段填充为0x0800，以表示网络层使用的是IP协议。源MAC地址为主机A的MAC地址，目的MAC地址为网关路由器E0/0接口的MAC地址。

## 数据帧转发过程

![](http://icing.fun/img/post/2021/01/30/frametranspath.jpg)

主机工作在半双工状态下，所以会使用CSMA/CD来检测链路是否空闲。

前导码用于使接收者进入同步状态，定界符用于指示帧的开始。

> 主机A工作在半双工状态下，所以会使用CSMA/CD来检测链路是否空闲。如果链路空闲，主机A会将一个前导码（Preamble）和一个帧首定界符（SFD）附加到帧头然后进行传输。前导码的作用是使接收设备进行同步并做好接收数据帧的准备。前导码是包括了7个字节的二进制“1”、“0”交替的代码，即1010…10共56位。帧首定界符是长度为1个字节的10101011二进制序列，它的作用是使接收端对帧的第一位进行定位。

![](http://icing.fun/img/post/2021/01/30/frametranspath2.jpg)

同一个冲突域里的设备都会接收到主机A发送的数据帧。

只有网关（RTA）会处理该数据帧，并继续转发。

> 本例中，主机A发送数据帧到共享以太网，此网络中的所有网络设备都会收到该帧。设备收到帧之后，首先会进行FCS校验。如果FCS校验未能通过，则帧被立即丢弃。对于通过了FCS校验的帧，设备会检查帧中的目的MAC地址。如果帧中的目的MAC地址与自己的MAC地址不同，设备将丢弃帧，如果相同，则会继续处理。处理过程中，帧头帧尾会被剥去（也就是解封装），剩下的数据报文会被根据帧头中的类型字段的值来送到网络层中的对应协议模块去处理。

## 数据包转发过程

![](http://icing.fun/img/post/2021/01/30/packtrans.jpg)

网关检查是否具有到达目的网络的路由条目。

如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。

> RTA收到此数据报文后，网络层会对该报文进行处理。RTA首先根据IP头部信息中的校验和字段，检查IP数据报文头部的完整性，然后根据目的IP地址查看路由表，确定是否能够将数据包转发到目的端。RTA还必须对TTL的值进行处理。另外，报文大小不能超过MTU值。如果报文大小超过MTU值，则报文将被分片。

> 网络层处理完成后，报文将被送到数据链路层重新进行封装，成为一个新的数据帧，该帧的头部会封装新的源MAC地址和目的MAC地址。如果当前网络设备不知道下一跳的MAC地址，将会使用ARP来获得。

## 数据帧解封装

![](http://icing.fun/img/post/2021/01/30/frameunpack.jpg)

RTB以服务器A的MAC地址作为目的MAC继续转发。

服务器A接收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧。

> 该示例中，服务器A处于一个共享以太网中，两台服务器都会收到RTB发送的数据帧。该帧的目的MAC地址与服务器B的接口MAC地址不匹配，所以会被服务器B丢弃。

> 服务器A成功收到该帧，并通过FCS校验。服务器A将利用帧中的类型字段来识别在网络层处理该数据的协议。该示例中，服务器A会将解封装后的此数据交给网络层的IP协议来进行处理。

## 数据包解封装

![](http://icing.fun/img/post/2021/01/30/packunpack.jpg)

服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同。

服务器A剥掉数据包的IP头部后，会送往上层协议TCP继续进行处理。

> 服务器A通过IP协议来处理该报文，首先会通过校验和字段来验证报文头的完整性，然后检查IP报文头中的目的IP地址是否与自己当前的IP地址匹配。

> 如果在源与目的之间的数据传输期间数据发生了报文分片，则报文会被目的端重新组合。标识字段用于标识属于同一数据源的分片报文，偏移量表示该分片在原分组中的相对位置。标志字段目前只有两位有意义，标志字段最低位为1，表示后面还有分片，为0表示这已经是最后一个数据片；中间一位为1表示不能分片，为0表示允许分片。所有的分片报文必须被目的端全部接收到后才会进行重新组合。

>协议字段表示此数据包携带的上层数据是哪种协议的数据。需要注意的是，下一个报头并非总是传输层报头。例如，ICMP报文也是使用IP协议封装，协议字段值为0x01。

## 数据段解封装

![](http://icing.fun/img/post/2021/01/30/dataunpack.jpg)

服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。

> 当IP报文头被处理完并剥离后，数据段会被发送到传输层进行处理。在此示例中，传输层协议使用的是TCP，且发送端和接收端已经通过三次握手建立了连接。传输层收到该数据段后，TCP协议会查看并处理该数据段头部信息，其中目的端口号为80，用于表示处理该数据的应用层协议为HTTP协议。TCP处理完头部信息后会将此数据段头部进行剥离，然后将剩下的应用数据发送到HTTP协议进行处理。
